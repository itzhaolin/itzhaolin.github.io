{"meta":{"title":"前端之路","subtitle":null,"description":"永远努力在你的生活之上保留一片天空","author":"Zhaolin Wu","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"常见问题","date":"2018-03-18T06:10:48.416Z","updated":"2018-03-13T09:32:39.864Z","comments":true,"path":"2018/03/18/常见问题/","link":"","permalink":"http://yoursite.com/2018/03/18/常见问题/","excerpt":"","text":"前端性能优化网站一.页面级优化 1.减少http请求 (1). 从设计实现层面简化页面 (2). 合理设置 HTTP缓存 —原则很简单，能缓存越多越好，能缓存越久越好。例如，很少变化的图片资源可以直接通过 HTTP Header中的Expires设置一个很长的过期头 ;变化不频繁而又可能会变的资源可以使用 Last-Modifed来做请求验证。尽可能的让资源能够在缓存中待得更久。 (3). 合并与压缩一个css和js文件,图片转成webP格式 —如果可以的话，尽可能的将外部的脚本、样式进行合并，多个合为一个。另外， CSS、 Javascript、Image 都可以用相应的工具进行压缩，压缩后往往能省下不少空间。 (4). CSS Sprites 导航栏中的图片合并成一张精灵图,减少图片请求次数 (5). 预览本地 Images 使用dataURL把图片的二进制数据,进base64编码,形成一个字符串,可以直接作为img的src直接使用 (6). Lazy Load Images（图片懒加载） 能在某些条件下或者页面刚加载时减少 HTTP请求数。对于图片而言，在页面刚加载的时候可以只加载第一屏，当用户继续往后滚屏的时候才加载后续的图片。 原理:把路径存在一个自定义属性中,当进入可视区,追加到img的src中取(jQuery.lazyload.js); 将外部脚本置底（将脚本内容在页面信息内容加载后再加载） 异步执行 inline脚本(其实原理和上面是一样，保证脚本在页面内容后面加载。) 避免页面跳转 —服务器在处理完http的请求后,会返回http响应报文.如接收的是3xx状态码,网页会重定向,重定向次数过多,网页会一直呈现刷新状态; 将 CSS放在 HEAD中 异步请求 Callback（就是将一些行为样式提取出来，慢慢的加载信息的内容） 减少不必要的 HTTP跳转 避免重复的资源请求二、代码级优化 Javascript CSS选择符 HTML Image压缩 ##cookie,sessionStorage,localStorage的区别: cookie的数据每次请求时都会发往服务器,sessionStorage和localStorage储存在本地; cookie只能 储存4k左右的数据; 其它两可以储存5M甚至更多的数据; cookie作用时间一直到过期为止; sessionStorage数据周期是关闭浏览器为止;localStorage储存的数据一直存在; 什么是ajax和json,它们的优缺点; ajax是一种无刷新页面,向后台发送数据请求,然后渲染页面的技术; 使用XMLHttpRequest进行异步数据查询和检索; 能不更新页面的前提下维护数据,异步模式,能快速地与用户进行交互,减轻服务器工作; 使用ajax后会影响浏览器的前进后退,即用户本地没有缓存.浏览前后都要向服务器发送请求; 发送get请求时可能会暴露用户数据,更新的动态无法被搜索到; json是一种数据交互的文本格式,可用于任何编程语言; 冒号赋值,容易混淆数据; 拖拽一个页面某元素 1.给移动的小盒子添加 draggble=true 2.监听大盒子 ondragover =function(event){event.preventDefault()}; 3.监听大盒子 ondrop=funtion(){to.appendChild(move)} 闭包 闭包就是函数中的函数,里面的函数可以访问外面函数的变量,外面的变量是这个内部函数的一部分; 作用:可以访问函数中得变量,可长期保存在内存中,生命周期较长; 闭包不能滥用,否则会导致内存泄漏,影响网页性能; window.onload 和jquery中$(function(){}) 入口函数 window.load 等页面内包括图片等资源所有元素加载完毕才执行; jquery的$(function(){})等DOM结构执行完毕即可; 1234代码段@function ()&#123; &#125; 备注段","categories":[],"tags":[]},{"title":"","slug":"H5C3总结","date":"2016-01-18T12:23:47.766Z","updated":"2018-03-05T09:26:28.000Z","comments":true,"path":"2016/01/18/H5C3总结/","link":"","permalink":"http://yoursite.com/2016/01/18/H5C3总结/","excerpt":"","text":"第三天第二天的复习canavs介绍 html5标签 js来操作 var context = canvas.getContext(“2d”); 画线 moveTo(x, y); lineTo(x, y); stroke(); 画矩形 rect(x, y, w, h) strokeRect(x, y, w, h) fillRect(x, y, w, h) 路径： closePath(); beginPath() clearRect(x, y, w, h); 画圆和弧 arc(x, y, r, start, end, anticlockwise) x： y r： lineTo(x, y), closePath 2Math.PI = 360deg; var r = angle / 180 Math.PI 样式 线条 lineWidth， lineCap = “round” 阴影 shadowOffsetX shadowOffsetY shadowBlur shadowColor 渐变 createLinearGradient(x0, y0, x1, y1); createRadialGradient(x0, y0, r0, x1, y1, r1) 文字的绘制 font = “20px Arial” textAlign = “left”; textBaseline = “middle”; strokeText(“text”, x, y) fillText(“text”, x, y) measureText(“text”).width; 图片的绘制 drawImage(img, x, y) //必须要保证图片已经加载成功了才能进行后面的操作 img.onload = function() {} drawImage(img, x, y, w, h) //缩放模式 drawImage(img, x0, y0, w0, h0, x1, y1, w1, h1) 连续动画 以一个非常快的速度来绘制每一帧， 一边绘制一边擦除 function draw() {}, setInterval(draw, 16.7) window.requestAnimationFrame(draw) //性能优化， 自适应刷新帧率 变形 context.scale(0.3, 0.3) context.translate(100, 100) context.rotate(0.5*Math.PI) 例子 折线图， 柱状图， 饼图 文字九宫格 图片放大器 移动的小人，小鸟扇动翅膀 小球的回弹 散光线 画图板，小鸟加速下落和旋转 备注： 。。。。。。。 小鸟游戏的描述（名词提炼法） 一只小鸟在天上飞， 如果撞到柱子上， 或者掉到地上， 就死了。123456小鸟 天 柱子 地， 类=》对象 draw小鸟一个（主角）天空对象二个陆地四个管道是6个 canvas几天的内容的总结 canvas它是什么， 它可以干什么？ 简单描述一个canvas绘图的基本的过程？ 创建一个canvas的标签， 使用canvas的dom元素来创建一个context的对象，所有后面的绘图操作都是调用这个context的属性和方法 如果我们只是绘制一些基本的形状，比如矩形， 画线，或者画圆， 先调对应的api， 把路径画出来，路径就是玻璃纸上的线条或是形状， 再去渲染 如果是写文字，或者是画图片， 直接调api， 显示在画布的某一块区域 怎么去绘的制矩形和圆？(以笔试题的形式出现) rect()，strokeRect(), fillRect() arc() 怎么绘制折线图， 柱状图， 饼图？ 折线图就是先计算出每个点的位置，然后呢循环画线；柱状图是先计算出每个矩形的坐标， 循环画矩形， 饼图是计算每个数据所点的比例， 对应的弧度，循环去画扇形；2. 但是用原生的方式，比较复杂，并且，效果也不太好。我们可以使用 echarts。 样式。 线条， 阴影， 渐变。 动画原理是什么， 用什么api， 绘制的过程怎么样？ 以一个非常快的速度来播放图片（绘制）， setInterval() window.requestAnimationFrame(), 每绘制一帧，先把画布清空。 如果有平移过或者旋转过坐标系，把坐标系还原 变换？ 平移， 旋转， 缩放","categories":[],"tags":[]}]}